@model FileUpload.Models.FileUploadModal

@{
    ViewData["Title"] = "File Details";
}
<style>
    .thumbnail {
        cursor: pointer;
    }


    .fullscreen-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.8);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    #fullscreen:target .fullscreen-overlay {
        display: flex;
    }

    .fullscreen-img {
        max-width: 90%;
        max-height: 90%;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
        border-radius: 8px;
        min-width: 60vw;
    }

    .close-btn {
        position: absolute;
        top: 20px;
        right: 50px;
        background: #fff;
        color: #333;
        padding: 10px 15px;
        border: 2px solid white;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
        text-decoration: none;
    }

        .close-btn:hover {
            border: 2px solid white;
            background: #333;
            color: #fff;
        }

    .img-div {
        max-width: 80vw;
        max-height: 80vh;
        overflow: auto;
    }

    .editable {
        display: none;
    }

    .btna {
        width: 10rem;
    }
</style>

<h1>@Model.OriginalFilename's Details</h1>

<div class="card">
    <div class="card-header">
        @Model.OriginalFilename
    </div>
    <div class="card-body">
        <h4>Preview:</h4>
        @if (Model.Extention == ".xls" || Model.Extention == ".xlsx")
        {
            <div class="preview-div">
                <button class="btn btn-primary" onclick="RefreshTable()">Refresh Table</button>
            </div>
            <div id="excelPreviewContainer">
            </div>


            <button class="btn btn-warning btna" id="editBtn" onclick="hideEditBtn()">Edit Table</button>
            <button id="saveChanges" class="btn btn-primary editable btna">Save Changes</button>



        }
        else
        {
            <div class="img-div">
                <a href="#fullscreen">
                    <img src="/Uploads/@Model.Filename" alt="Uploaded Image" class="thumbnail" style="max-width: auto; height: 60vh;" />
                </a>
            </div>
            <div id="fullscreen">
                <div class="fullscreen-overlay">
                    <a href="#" class="close-btn ">Close</a>
                    <img src="/Uploads/@Model.Filename" alt="Fullscreen Image" class="fullscreen-img">
                </div>
            </div>

        }

        <p><strong>File Type:</strong> @Model.FileType</p>
        <p><strong>Uploaded On:</strong> @Model.UploadedOn.ToString("f")</p>
        <p><strong>File Size:</strong> @Model.FileSize KB</p>
    </div>
</div>

<div class="mt-3">
    <a asp-action="Download" asp-route-id="@Model.Id" class="btn btn-info">Download</a>
    <a href="javascript:void(0);" onclick="confirmDelete('@Url.Action("Delete", "FileUpload", new { id = Model.Id })')" class="btn btn-danger">Delete</a>
    <a asp-action="DataGrid" class="btn btn-dark">Back to List</a>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript">
        $(document).ready(function () {
        var param1 = "";
        var param2 = "";
        sortExcel(param1, param2);
        });
    function RefreshTable() {
        var param1 = "";
        var param2 = "";
        sortExcel(param1, param2);
    }



    let lastClicked = { column: null, direction: null };

        function sortExcel(button, column, direction) {
        lastClicked = { column, direction };
        // Disable the clicked button
        button.disabled = true;

        $.ajax({
            url: '@Url.Action("LoadExcelPreview", "FileUpload")',
            type: 'POST',
            data: {
                fileId: @Model.Id,
                sortColumn: column,
                sortDirection: direction
            },
            success: function (result) {
                console.log(result);
                $("#excelPreviewContainer").html(result);

                // Re-enable the button after AJAX success
                reapplyButtonState();
            },
            error: function (xhr) {
                alert("Error: " + xhr.responseText);

                // Re-enable the button if there is an error
                button.disabled = false;
            }
        });
    }

        function reapplyButtonState() {
        if (lastClicked.column && lastClicked.direction) {
            const buttons = document.querySelectorAll(`input[type="radio"][onclick*="'${lastClicked.column}','${lastClicked.direction}'"]`);
            buttons.forEach(btn => {
                btn.disabled = true;
                // Find the corresponding label and change its background color and text color
                const label = btn.closest('label');
                if (label) {
                    // Apply styles to indicate that the button is selected and disabled
                    if (btn.value == 1) {
                        label.style.backgroundColor = 'rgb(255, 4, 4)';
                        label.style.color = '#fff'; // For red
                        label.style.padding = '13px'
                        label.style.cursor = 'not-allowed'
                    } else if (btn.value == 2) {
                        label.style.backgroundColor = 'rgb(0, 172, 29)';
                        label.style.color = '#fff'; // For green
                        label.style.padding = '13px'
                        label.style.cursor = 'not-allowed'
                    }
                }
            });
        }
    }


        document.getElementById("saveChanges").addEventListener("click", function () {
            const rows = document.querySelectorAll(".table-div-body .div-table-row");
            const updatedData = [];

            rows.forEach((row) => {
                const rowData = [];
                row.querySelectorAll(".div-table-data").forEach((cell) => {
                    rowData.push(cell.textContent.trim());
                });
                if (rowData.length > 0) updatedData.push(rowData);
            });
            const fileName = '@Model.Filename';
            const fileid = '@Model.Id'
            const ogFileName = '@Model.OriginalFilename'
            SendData(fileid,fileName,updatedData,ogFileName);
            document.getElementById("saveChanges").classList.add("editable");
            document.getElementById("editBtn").classList.remove("editable");
            const editDivs = document.querySelectorAll('#editDiv');
            editDivs.forEach((div) => {
              div.setAttribute('contenteditable', 'false');
              div.style.border = "2px solid black";
            });
        });

        function hideEditBtn(){
            const editDivs = document.querySelectorAll('#editDiv');
            editDivs.forEach((div) => {
              div.setAttribute('contenteditable', 'true');
              div.style.border = "1px dashed black";
            });
            document.getElementById("editBtn").classList.add("editable");
            document.getElementById("saveChanges").classList.remove("editable");
        }

    function SendData(fileid,fileName,updatedData,ogFileName) {
        $.ajax({
            url: '@Url.Action("SaveUpdatedExcel", "FileUpload")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                Fileid:fileid,
                FileName:fileName,
                UpdatedData: updatedData,
                OgFileName : ogFileName
            }),
            success: function (result) {
                if (result.success) {
                    alert(result.message);
                    // Optionally, update the UI with new data
                    $("#excelPreviewContainer").html(result.newPreview); // Adjust according to the response
                } else {
                    console.log(result.message);
                    alert(result.message);
                }
            },
            error: function (xhr) {
                alert("Error: " + xhr.responseText);
            }
        });
    }



</script>